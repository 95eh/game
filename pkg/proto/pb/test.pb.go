// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type C2G_ServerDate struct {
	RpcId                int32    `protobuf:"varint,90,opt,name=RpcId,proto3" json:"RpcId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2G_ServerDate) Reset()         { *m = C2G_ServerDate{} }
func (m *C2G_ServerDate) String() string { return proto.CompactTextString(m) }
func (*C2G_ServerDate) ProtoMessage()    {}
func (*C2G_ServerDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *C2G_ServerDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2G_ServerDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2G_ServerDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2G_ServerDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2G_ServerDate.Merge(m, src)
}
func (m *C2G_ServerDate) XXX_Size() int {
	return m.Size()
}
func (m *C2G_ServerDate) XXX_DiscardUnknown() {
	xxx_messageInfo_C2G_ServerDate.DiscardUnknown(m)
}

var xxx_messageInfo_C2G_ServerDate proto.InternalMessageInfo

func (m *C2G_ServerDate) GetRpcId() int32 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

type G2C_ServerDate struct {
	RpcId                int32    `protobuf:"varint,90,opt,name=RpcId,proto3" json:"RpcId,omitempty"`
	Error                int32    `protobuf:"varint,91,opt,name=Error,proto3" json:"Error,omitempty"`
	Message              string   `protobuf:"bytes,92,opt,name=Message,proto3" json:"Message,omitempty"`
	Timestamp            int64    `protobuf:"varint,93,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TimeZoneSeconds      int32    `protobuf:"varint,94,opt,name=TimeZoneSeconds,proto3" json:"TimeZoneSeconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *G2C_ServerDate) Reset()         { *m = G2C_ServerDate{} }
func (m *G2C_ServerDate) String() string { return proto.CompactTextString(m) }
func (*G2C_ServerDate) ProtoMessage()    {}
func (*G2C_ServerDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *G2C_ServerDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *G2C_ServerDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_G2C_ServerDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *G2C_ServerDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G2C_ServerDate.Merge(m, src)
}
func (m *G2C_ServerDate) XXX_Size() int {
	return m.Size()
}
func (m *G2C_ServerDate) XXX_DiscardUnknown() {
	xxx_messageInfo_G2C_ServerDate.DiscardUnknown(m)
}

var xxx_messageInfo_G2C_ServerDate proto.InternalMessageInfo

func (m *G2C_ServerDate) GetRpcId() int32 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

func (m *G2C_ServerDate) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *G2C_ServerDate) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *G2C_ServerDate) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *G2C_ServerDate) GetTimeZoneSeconds() int32 {
	if m != nil {
		return m.TimeZoneSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*C2G_ServerDate)(nil), "pb.C2G_ServerDate")
	proto.RegisterType((*G2C_ServerDate)(nil), "pb.G2C_ServerDate")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe3, 0xe2, 0x73, 0x36,
	0x72, 0x8f, 0x0f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x72, 0x49, 0x2c, 0x49, 0x15, 0x12, 0xe1, 0x62,
	0x0d, 0x2a, 0x48, 0xf6, 0x4c, 0x91, 0x88, 0x52, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0x70, 0x94, 0xe6,
	0x31, 0x72, 0xf1, 0xb9, 0x1b, 0x39, 0x13, 0x54, 0x08, 0x12, 0x75, 0x2d, 0x2a, 0xca, 0x2f, 0x92,
	0x88, 0x86, 0x88, 0x82, 0x39, 0x42, 0x12, 0x5c, 0xec, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9,
	0x12, 0x31, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x90, 0x0c, 0x17, 0x67, 0x48, 0x66, 0x6e,
	0x6a, 0x71, 0x49, 0x62, 0x6e, 0x81, 0x44, 0xac, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x42, 0x40, 0x48,
	0x83, 0x8b, 0x1f, 0xc4, 0x89, 0xca, 0xcf, 0x4b, 0x0d, 0x4e, 0x4d, 0xce, 0xcf, 0x4b, 0x29, 0x96,
	0x88, 0x03, 0x9b, 0x8b, 0x2e, 0xec, 0x24, 0x7a, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0xac, 0x5f, 0x90, 0x94, 0xc4, 0x06,
	0xf6, 0xaa, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x44, 0x95, 0x7a, 0xf8, 0x00, 0x00, 0x00,
}

func (m *C2G_ServerDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2G_ServerDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2G_ServerDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RpcId != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.RpcId))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	return len(dAtA) - i, nil
}

func (m *G2C_ServerDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *G2C_ServerDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *G2C_ServerDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeZoneSeconds != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.TimeZoneSeconds))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf0
	}
	if m.Timestamp != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe8
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	if m.Error != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd8
	}
	if m.RpcId != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.RpcId))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2G_ServerDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpcId != 0 {
		n += 2 + sovTest(uint64(m.RpcId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *G2C_ServerDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpcId != 0 {
		n += 2 + sovTest(uint64(m.RpcId))
	}
	if m.Error != 0 {
		n += 2 + sovTest(uint64(m.Error))
	}
	l = len(m.Message)
	if l > 0 {
		n += 2 + l + sovTest(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 2 + sovTest(uint64(m.Timestamp))
	}
	if m.TimeZoneSeconds != 0 {
		n += 2 + sovTest(uint64(m.TimeZoneSeconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2G_ServerDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2G_ServerDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2G_ServerDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcId", wireType)
			}
			m.RpcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *G2C_ServerDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: G2C_ServerDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: G2C_ServerDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcId", wireType)
			}
			m.RpcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 91:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 93:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 94:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZoneSeconds", wireType)
			}
			m.TimeZoneSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeZoneSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
