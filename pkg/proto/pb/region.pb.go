// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: region.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Region struct {
	Id                   int64    `protobuf:"fixed64,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Status               uint32   `protobuf:"fixed32,3,opt,name=Status,proto3" json:"Status,omitempty"`
	HttpIp               string   `protobuf:"bytes,4,opt,name=HttpIp,proto3" json:"HttpIp,omitempty"`
	HttpPort             string   `protobuf:"bytes,5,opt,name=HttpPort,proto3" json:"HttpPort,omitempty"`
	SocketIp             string   `protobuf:"bytes,6,opt,name=SocketIp,proto3" json:"SocketIp,omitempty"`
	SocketPort           string   `protobuf:"bytes,7,opt,name=SocketPort,proto3" json:"SocketPort,omitempty"`
	WebsocketIp          string   `protobuf:"bytes,8,opt,name=WebsocketIp,proto3" json:"WebsocketIp,omitempty"`
	WebsocketPort        string   `protobuf:"bytes,9,opt,name=WebsocketPort,proto3" json:"WebsocketPort,omitempty"`
	UdpIp                string   `protobuf:"bytes,10,opt,name=UdpIp,proto3" json:"UdpIp,omitempty"`
	UdpPort              string   `protobuf:"bytes,11,opt,name=UdpPort,proto3" json:"UdpPort,omitempty"`
	Count                uint32   `protobuf:"fixed32,12,opt,name=Count,proto3" json:"Count,omitempty"`
	Cap                  uint32   `protobuf:"fixed32,13,opt,name=Cap,proto3" json:"Cap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eef30384a8831dd, []int{0}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Region) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Region) GetHttpIp() string {
	if m != nil {
		return m.HttpIp
	}
	return ""
}

func (m *Region) GetHttpPort() string {
	if m != nil {
		return m.HttpPort
	}
	return ""
}

func (m *Region) GetSocketIp() string {
	if m != nil {
		return m.SocketIp
	}
	return ""
}

func (m *Region) GetSocketPort() string {
	if m != nil {
		return m.SocketPort
	}
	return ""
}

func (m *Region) GetWebsocketIp() string {
	if m != nil {
		return m.WebsocketIp
	}
	return ""
}

func (m *Region) GetWebsocketPort() string {
	if m != nil {
		return m.WebsocketPort
	}
	return ""
}

func (m *Region) GetUdpIp() string {
	if m != nil {
		return m.UdpIp
	}
	return ""
}

func (m *Region) GetUdpPort() string {
	if m != nil {
		return m.UdpPort
	}
	return ""
}

func (m *Region) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Region) GetCap() uint32 {
	if m != nil {
		return m.Cap
	}
	return 0
}

// code = 0
type ReqRegionList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRegionList) Reset()         { *m = ReqRegionList{} }
func (m *ReqRegionList) String() string { return proto.CompactTextString(m) }
func (*ReqRegionList) ProtoMessage()    {}
func (*ReqRegionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eef30384a8831dd, []int{1}
}
func (m *ReqRegionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqRegionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqRegionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqRegionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRegionList.Merge(m, src)
}
func (m *ReqRegionList) XXX_Size() int {
	return m.Size()
}
func (m *ReqRegionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRegionList.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRegionList proto.InternalMessageInfo

// code = 0
type ResRegionList struct {
	List                 []*Region `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResRegionList) Reset()         { *m = ResRegionList{} }
func (m *ResRegionList) String() string { return proto.CompactTextString(m) }
func (*ResRegionList) ProtoMessage()    {}
func (*ResRegionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eef30384a8831dd, []int{2}
}
func (m *ResRegionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResRegionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResRegionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResRegionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResRegionList.Merge(m, src)
}
func (m *ResRegionList) XXX_Size() int {
	return m.Size()
}
func (m *ResRegionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResRegionList.DiscardUnknown(m)
}

var xxx_messageInfo_ResRegionList proto.InternalMessageInfo

func (m *ResRegionList) GetList() []*Region {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Region)(nil), "pb.Region")
	proto.RegisterType((*ReqRegionList)(nil), "pb.ReqRegionList")
	proto.RegisterType((*ResRegionList)(nil), "pb.ResRegionList")
}

func init() { proto.RegisterFile("region.proto", fileDescriptor_6eef30384a8831dd) }

var fileDescriptor_6eef30384a8831dd = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0xef, 0x24, 0x6d, 0xda, 0x9e, 0x34, 0xd7, 0x72, 0x50, 0x19, 0x5c, 0x0c, 0x21, 0xb8,
	0xc8, 0x2a, 0x05, 0x7d, 0x03, 0xbb, 0x31, 0x20, 0x22, 0x53, 0x8a, 0xe0, 0x2e, 0x31, 0x41, 0x8a,
	0xd8, 0x19, 0x93, 0xe9, 0xbb, 0xf8, 0x48, 0x2e, 0x5d, 0xf8, 0x00, 0x12, 0x5f, 0x44, 0xe6, 0x4c,
	0x53, 0xeb, 0x2a, 0xe7, 0xfb, 0xfe, 0x7f, 0xc2, 0x49, 0x06, 0xa6, 0x4d, 0xfd, 0xb4, 0x56, 0x9b,
	0x4c, 0x37, 0xca, 0x28, 0xf4, 0x74, 0x99, 0x7c, 0x7a, 0x10, 0x48, 0x92, 0xf8, 0x1f, 0xbc, 0xbc,
	0xe2, 0x2c, 0x66, 0xe9, 0x4c, 0x7a, 0x79, 0x85, 0x08, 0x83, 0xdb, 0xe2, 0xa5, 0xe6, 0x5e, 0xcc,
	0xd2, 0x89, 0xa4, 0x19, 0x4f, 0x21, 0x58, 0x9a, 0xc2, 0x6c, 0x5b, 0xee, 0xc7, 0x2c, 0x1d, 0xc9,
	0x1d, 0x59, 0x7f, 0x6d, 0x8c, 0xce, 0x35, 0x1f, 0x50, 0x7b, 0x47, 0x78, 0x06, 0x63, 0x3b, 0xdd,
	0xa9, 0xc6, 0xf0, 0x21, 0x25, 0x7b, 0xb6, 0xd9, 0x52, 0x3d, 0x3e, 0xd7, 0x26, 0xd7, 0x3c, 0x70,
	0x59, 0xcf, 0x28, 0x00, 0xdc, 0x4c, 0x27, 0x47, 0x94, 0x1e, 0x18, 0x8c, 0x21, 0xbc, 0xaf, 0xcb,
	0xb6, 0x3f, 0x3e, 0xa6, 0xc2, 0xa1, 0xc2, 0x73, 0x88, 0xf6, 0x48, 0x2f, 0x99, 0x50, 0xe7, 0xaf,
	0xc4, 0x63, 0x18, 0xae, 0x2a, 0xbb, 0x36, 0x50, 0xea, 0x00, 0x39, 0x8c, 0x56, 0x95, 0x5b, 0x3a,
	0x24, 0xdf, 0xa3, 0xed, 0x2f, 0xd4, 0x76, 0x63, 0xf8, 0x94, 0x3e, 0xdf, 0x01, 0xce, 0xc0, 0x5f,
	0x14, 0x9a, 0x47, 0xe4, 0xec, 0x98, 0x1c, 0x41, 0x24, 0xeb, 0x57, 0xf7, 0x63, 0x6f, 0xd6, 0xad,
	0x49, 0xe6, 0x56, 0xb4, 0xbf, 0x02, 0x05, 0x0c, 0xec, 0x93, 0xb3, 0xd8, 0x4f, 0xc3, 0x0b, 0xc8,
	0x74, 0x99, 0xb9, 0x54, 0x92, 0xbf, 0x3a, 0x79, 0xef, 0x04, 0xfb, 0xe8, 0x04, 0xfb, 0xea, 0x04,
	0x7b, 0xfb, 0x16, 0xff, 0x1e, 0xfc, 0xb9, 0x2e, 0xcb, 0x80, 0xae, 0xee, 0xf2, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x5a, 0x04, 0x99, 0x31, 0xca, 0x01, 0x00, 0x00,
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cap != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Cap))
		i--
		dAtA[i] = 0x6d
	}
	if m.Count != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Count))
		i--
		dAtA[i] = 0x65
	}
	if len(m.UdpPort) > 0 {
		i -= len(m.UdpPort)
		copy(dAtA[i:], m.UdpPort)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.UdpPort)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UdpIp) > 0 {
		i -= len(m.UdpIp)
		copy(dAtA[i:], m.UdpIp)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.UdpIp)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.WebsocketPort) > 0 {
		i -= len(m.WebsocketPort)
		copy(dAtA[i:], m.WebsocketPort)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.WebsocketPort)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.WebsocketIp) > 0 {
		i -= len(m.WebsocketIp)
		copy(dAtA[i:], m.WebsocketIp)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.WebsocketIp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SocketPort) > 0 {
		i -= len(m.SocketPort)
		copy(dAtA[i:], m.SocketPort)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.SocketPort)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SocketIp) > 0 {
		i -= len(m.SocketIp)
		copy(dAtA[i:], m.SocketIp)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.SocketIp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HttpPort) > 0 {
		i -= len(m.HttpPort)
		copy(dAtA[i:], m.HttpPort)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HttpPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HttpIp) > 0 {
		i -= len(m.HttpIp)
		copy(dAtA[i:], m.HttpIp)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HttpIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Status))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Id))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ReqRegionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqRegionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqRegionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ResRegionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResRegionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResRegionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegion(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 9
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Status != 0 {
		n += 5
	}
	l = len(m.HttpIp)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.HttpPort)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.SocketIp)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.SocketPort)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.WebsocketIp)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.WebsocketPort)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.UdpIp)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.UdpPort)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Count != 0 {
		n += 5
	}
	if m.Cap != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqRegionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResRegionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegion(x uint64) (n int) {
	return sovRegion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsocketIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsocketIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsocketPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsocketPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UdpIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UdpPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			m.Cap = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Cap = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqRegionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqRegionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqRegionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResRegionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResRegionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResRegionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Region{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegion = fmt.Errorf("proto: unexpected end of group")
)
