// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: character.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReqCharacter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCharacter) Reset()         { *m = ReqCharacter{} }
func (m *ReqCharacter) String() string { return proto.CompactTextString(m) }
func (*ReqCharacter) ProtoMessage()    {}
func (*ReqCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{0}
}
func (m *ReqCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCharacter.Merge(m, src)
}
func (m *ReqCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ReqCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCharacter proto.InternalMessageInfo

type Character struct {
	// @gotags: json:"Cid,string"
	Cid       int64  `protobuf:"fixed64,1,opt,name=Cid,proto3" json:"Cid,string"`
	NickName  string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Gender    int32  `protobuf:"fixed32,3,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Figure    int32  `protobuf:"fixed32,4,opt,name=Figure,proto3" json:"Figure,omitempty"`
	IsNovice  bool   `protobuf:"varint,5,opt,name=IsNovice,proto3" json:"IsNovice,omitempty"`
	SceneType int32  `protobuf:"fixed32,6,opt,name=SceneType,proto3" json:"SceneType,omitempty"`
	// @gotags: json:"SceneId,string"
	SceneId              int64    `protobuf:"fixed64,7,opt,name=SceneId,proto3" json:"SceneId,string"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Character) Reset()         { *m = Character{} }
func (m *Character) String() string { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()    {}
func (*Character) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{1}
}
func (m *Character) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Character) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Character.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Character) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Character.Merge(m, src)
}
func (m *Character) XXX_Size() int {
	return m.Size()
}
func (m *Character) XXX_DiscardUnknown() {
	xxx_messageInfo_Character.DiscardUnknown(m)
}

var xxx_messageInfo_Character proto.InternalMessageInfo

func (m *Character) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Character) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *Character) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *Character) GetFigure() int32 {
	if m != nil {
		return m.Figure
	}
	return 0
}

func (m *Character) GetIsNovice() bool {
	if m != nil {
		return m.IsNovice
	}
	return false
}

func (m *Character) GetSceneType() int32 {
	if m != nil {
		return m.SceneType
	}
	return 0
}

func (m *Character) GetSceneId() int64 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

type ResCharacter struct {
	ErrCode              uint32       `protobuf:"fixed32,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	Characters           []*Character `protobuf:"bytes,2,rep,name=Characters,proto3" json:"Characters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResCharacter) Reset()         { *m = ResCharacter{} }
func (m *ResCharacter) String() string { return proto.CompactTextString(m) }
func (*ResCharacter) ProtoMessage()    {}
func (*ResCharacter) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{2}
}
func (m *ResCharacter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacter.Merge(m, src)
}
func (m *ResCharacter) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacter) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacter.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacter proto.InternalMessageInfo

func (m *ResCharacter) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResCharacter) GetCharacters() []*Character {
	if m != nil {
		return m.Characters
	}
	return nil
}

type ReqCharacterCreate struct {
	NickName             string   `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Gender               int32    `protobuf:"fixed32,2,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Figure               int32    `protobuf:"fixed32,3,opt,name=Figure,proto3" json:"Figure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCharacterCreate) Reset()         { *m = ReqCharacterCreate{} }
func (m *ReqCharacterCreate) String() string { return proto.CompactTextString(m) }
func (*ReqCharacterCreate) ProtoMessage()    {}
func (*ReqCharacterCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{3}
}
func (m *ReqCharacterCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCharacterCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCharacterCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCharacterCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCharacterCreate.Merge(m, src)
}
func (m *ReqCharacterCreate) XXX_Size() int {
	return m.Size()
}
func (m *ReqCharacterCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCharacterCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCharacterCreate proto.InternalMessageInfo

func (m *ReqCharacterCreate) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ReqCharacterCreate) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *ReqCharacterCreate) GetFigure() int32 {
	if m != nil {
		return m.Figure
	}
	return 0
}

// 1: 敏感词
// 2: 长度错误
// 3: 性别错误
// 4:
type ResCharacterCreate struct {
	ErrCode              uint32   `protobuf:"fixed32,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCharacterCreate) Reset()         { *m = ResCharacterCreate{} }
func (m *ResCharacterCreate) String() string { return proto.CompactTextString(m) }
func (*ResCharacterCreate) ProtoMessage()    {}
func (*ResCharacterCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{4}
}
func (m *ResCharacterCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacterCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacterCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacterCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacterCreate.Merge(m, src)
}
func (m *ResCharacterCreate) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacterCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacterCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacterCreate proto.InternalMessageInfo

func (m *ResCharacterCreate) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

// 1: 没有设置cid
// 2: 查询失败
// 3: 不存在的cid
type ReqCharacterSelect struct {
	// @gotags: json:"Cid,string"
	Cid                  int64    `protobuf:"fixed64,1,opt,name=Cid,proto3" json:"Cid,string"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCharacterSelect) Reset()         { *m = ReqCharacterSelect{} }
func (m *ReqCharacterSelect) String() string { return proto.CompactTextString(m) }
func (*ReqCharacterSelect) ProtoMessage()    {}
func (*ReqCharacterSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{5}
}
func (m *ReqCharacterSelect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCharacterSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCharacterSelect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCharacterSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCharacterSelect.Merge(m, src)
}
func (m *ReqCharacterSelect) XXX_Size() int {
	return m.Size()
}
func (m *ReqCharacterSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCharacterSelect.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCharacterSelect proto.InternalMessageInfo

func (m *ReqCharacterSelect) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ResCharacterSelect struct {
	ErrCode              uint32   `protobuf:"fixed32,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCharacterSelect) Reset()         { *m = ResCharacterSelect{} }
func (m *ResCharacterSelect) String() string { return proto.CompactTextString(m) }
func (*ResCharacterSelect) ProtoMessage()    {}
func (*ResCharacterSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{6}
}
func (m *ResCharacterSelect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacterSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacterSelect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacterSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacterSelect.Merge(m, src)
}
func (m *ResCharacterSelect) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacterSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacterSelect.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacterSelect proto.InternalMessageInfo

func (m *ResCharacterSelect) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqCharacterEnterScene struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCharacterEnterScene) Reset()         { *m = ReqCharacterEnterScene{} }
func (m *ReqCharacterEnterScene) String() string { return proto.CompactTextString(m) }
func (*ReqCharacterEnterScene) ProtoMessage()    {}
func (*ReqCharacterEnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{7}
}
func (m *ReqCharacterEnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCharacterEnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCharacterEnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCharacterEnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCharacterEnterScene.Merge(m, src)
}
func (m *ReqCharacterEnterScene) XXX_Size() int {
	return m.Size()
}
func (m *ReqCharacterEnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCharacterEnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCharacterEnterScene proto.InternalMessageInfo

type ResCharacterEnterScene struct {
	ErrCode              uint32   `protobuf:"fixed32,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCharacterEnterScene) Reset()         { *m = ResCharacterEnterScene{} }
func (m *ResCharacterEnterScene) String() string { return proto.CompactTextString(m) }
func (*ResCharacterEnterScene) ProtoMessage()    {}
func (*ResCharacterEnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{8}
}
func (m *ResCharacterEnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacterEnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacterEnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacterEnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacterEnterScene.Merge(m, src)
}
func (m *ResCharacterEnterScene) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacterEnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacterEnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacterEnterScene proto.InternalMessageInfo

func (m *ResCharacterEnterScene) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqCharacterChangeScene struct {
	SceneType int32 `protobuf:"fixed32,1,opt,name=SceneType,proto3" json:"SceneType,omitempty"`
	// @gotags: json:"SceneId,string"
	SceneId              int64    `protobuf:"fixed64,2,opt,name=SceneId,proto3" json:"SceneId,string"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCharacterChangeScene) Reset()         { *m = ReqCharacterChangeScene{} }
func (m *ReqCharacterChangeScene) String() string { return proto.CompactTextString(m) }
func (*ReqCharacterChangeScene) ProtoMessage()    {}
func (*ReqCharacterChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{9}
}
func (m *ReqCharacterChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCharacterChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCharacterChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCharacterChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCharacterChangeScene.Merge(m, src)
}
func (m *ReqCharacterChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *ReqCharacterChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCharacterChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCharacterChangeScene proto.InternalMessageInfo

func (m *ReqCharacterChangeScene) GetSceneType() int32 {
	if m != nil {
		return m.SceneType
	}
	return 0
}

func (m *ReqCharacterChangeScene) GetSceneId() int64 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

type ResCharacterChangeScene struct {
	ErrCode              uint32   `protobuf:"fixed32,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCharacterChangeScene) Reset()         { *m = ResCharacterChangeScene{} }
func (m *ResCharacterChangeScene) String() string { return proto.CompactTextString(m) }
func (*ResCharacterChangeScene) ProtoMessage()    {}
func (*ResCharacterChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{10}
}
func (m *ResCharacterChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacterChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacterChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacterChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacterChangeScene.Merge(m, src)
}
func (m *ResCharacterChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacterChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacterChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacterChangeScene proto.InternalMessageInfo

func (m *ResCharacterChangeScene) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

type ReqCharacterExitScene struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCharacterExitScene) Reset()         { *m = ReqCharacterExitScene{} }
func (m *ReqCharacterExitScene) String() string { return proto.CompactTextString(m) }
func (*ReqCharacterExitScene) ProtoMessage()    {}
func (*ReqCharacterExitScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{11}
}
func (m *ReqCharacterExitScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqCharacterExitScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqCharacterExitScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqCharacterExitScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCharacterExitScene.Merge(m, src)
}
func (m *ReqCharacterExitScene) XXX_Size() int {
	return m.Size()
}
func (m *ReqCharacterExitScene) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCharacterExitScene.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCharacterExitScene proto.InternalMessageInfo

type ResCharacterExitScene struct {
	ErrCode              uint32   `protobuf:"fixed32,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCharacterExitScene) Reset()         { *m = ResCharacterExitScene{} }
func (m *ResCharacterExitScene) String() string { return proto.CompactTextString(m) }
func (*ResCharacterExitScene) ProtoMessage()    {}
func (*ResCharacterExitScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_17d698b655df4d08, []int{12}
}
func (m *ResCharacterExitScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResCharacterExitScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResCharacterExitScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResCharacterExitScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCharacterExitScene.Merge(m, src)
}
func (m *ResCharacterExitScene) XXX_Size() int {
	return m.Size()
}
func (m *ResCharacterExitScene) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCharacterExitScene.DiscardUnknown(m)
}

var xxx_messageInfo_ResCharacterExitScene proto.InternalMessageInfo

func (m *ResCharacterExitScene) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqCharacter)(nil), "pb.ReqCharacter")
	proto.RegisterType((*Character)(nil), "pb.Character")
	proto.RegisterType((*ResCharacter)(nil), "pb.ResCharacter")
	proto.RegisterType((*ReqCharacterCreate)(nil), "pb.ReqCharacterCreate")
	proto.RegisterType((*ResCharacterCreate)(nil), "pb.ResCharacterCreate")
	proto.RegisterType((*ReqCharacterSelect)(nil), "pb.ReqCharacterSelect")
	proto.RegisterType((*ResCharacterSelect)(nil), "pb.ResCharacterSelect")
	proto.RegisterType((*ReqCharacterEnterScene)(nil), "pb.ReqCharacterEnterScene")
	proto.RegisterType((*ResCharacterEnterScene)(nil), "pb.ResCharacterEnterScene")
	proto.RegisterType((*ReqCharacterChangeScene)(nil), "pb.ReqCharacterChangeScene")
	proto.RegisterType((*ResCharacterChangeScene)(nil), "pb.ResCharacterChangeScene")
	proto.RegisterType((*ReqCharacterExitScene)(nil), "pb.ReqCharacterExitScene")
	proto.RegisterType((*ResCharacterExitScene)(nil), "pb.ResCharacterExitScene")
}

func init() { proto.RegisterFile("character.proto", fileDescriptor_17d698b655df4d08) }

var fileDescriptor_17d698b655df4d08 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x4e, 0xab, 0x50,
	0x10, 0xbe, 0x07, 0xee, 0x2d, 0xed, 0xdc, 0x9f, 0x36, 0x27, 0x69, 0x7b, 0x72, 0x63, 0x08, 0x61,
	0x61, 0xd8, 0x88, 0xb1, 0x7d, 0x03, 0x49, 0x35, 0xdd, 0x34, 0x91, 0x9a, 0x98, 0xb8, 0x92, 0x9f,
	0x49, 0x4b, 0x54, 0xc0, 0x03, 0x1a, 0x7d, 0x13, 0x5f, 0xc6, 0xbd, 0x4b, 0x1f, 0xc1, 0xd4, 0x17,
	0x31, 0x07, 0x5a, 0x0a, 0x6d, 0xe9, 0x8e, 0x6f, 0xbe, 0x99, 0xef, 0xcc, 0xf7, 0x4d, 0x80, 0xb6,
	0x37, 0x77, 0xb8, 0xe3, 0xa5, 0xc8, 0xcd, 0x98, 0x47, 0x69, 0x44, 0xa5, 0xd8, 0xd5, 0xff, 0xc1,
	0x1f, 0x1b, 0x1f, 0xac, 0x15, 0xa3, 0xbf, 0x11, 0x68, 0x15, 0x88, 0x76, 0x40, 0xb6, 0x02, 0x9f,
	0x11, 0x8d, 0x18, 0x1d, 0x5b, 0x7c, 0xd2, 0xff, 0xd0, 0x9c, 0x04, 0xde, 0xed, 0xc4, 0xb9, 0x47,
	0x26, 0x69, 0xc4, 0x68, 0xd9, 0x05, 0xa6, 0x3d, 0x68, 0x9c, 0x63, 0xe8, 0x23, 0x67, 0xb2, 0x46,
	0x8c, 0xb6, 0xbd, 0x44, 0xa2, 0x7e, 0x16, 0xcc, 0x1e, 0x39, 0xb2, 0x9f, 0x79, 0x3d, 0x47, 0x42,
	0x6b, 0x9c, 0x4c, 0xa2, 0xa7, 0xc0, 0x43, 0xf6, 0x4b, 0x23, 0x46, 0xd3, 0x2e, 0x30, 0x3d, 0x80,
	0xd6, 0xd4, 0xc3, 0x10, 0x2f, 0x5f, 0x62, 0x64, 0x8d, 0x6c, 0x6c, 0x5d, 0xa0, 0x0c, 0x94, 0x0c,
	0x8c, 0x7d, 0xa6, 0x64, 0xbb, 0xad, 0xa0, 0x7e, 0x25, 0xfc, 0x24, 0x6b, 0x07, 0x0c, 0x94, 0x11,
	0xe7, 0x56, 0xe4, 0x63, 0xe6, 0x42, 0xb1, 0x57, 0x90, 0x1e, 0x01, 0x14, 0x6d, 0x09, 0x93, 0x34,
	0xd9, 0xf8, 0x3d, 0xf8, 0x6b, 0xc6, 0xae, 0x59, 0x54, 0xed, 0x52, 0x83, 0x7e, 0x03, 0xb4, 0x1c,
	0x94, 0xc5, 0xd1, 0x49, 0xb1, 0x12, 0x07, 0xa9, 0x8d, 0x43, 0xaa, 0x89, 0x43, 0x2e, 0xc7, 0xa1,
	0x9b, 0xe2, 0x85, 0x64, 0xf3, 0x85, 0x5a, 0x03, 0xfa, 0x61, 0x75, 0xa3, 0x29, 0xde, 0xa1, 0x97,
	0x6e, 0x9f, 0x6c, 0x53, 0x77, 0xd9, 0x57, 0xaf, 0xcb, 0xa0, 0x57, 0xd6, 0x1d, 0x85, 0x62, 0x48,
	0xc4, 0xab, 0x0f, 0x04, 0x93, 0xec, 0x60, 0xf6, 0xa8, 0x5d, 0x40, 0xbf, 0x92, 0xdb, 0xdc, 0x09,
	0x67, 0x98, 0x0f, 0x55, 0x6e, 0x4c, 0xf6, 0xdc, 0x58, 0xaa, 0xde, 0x78, 0x28, 0x24, 0x93, 0x9d,
	0x92, 0xf5, 0x7b, 0xf4, 0xa1, 0x5b, 0x71, 0xf5, 0x1c, 0xa4, 0xb9, 0xa9, 0x13, 0x41, 0x24, 0xdb,
	0x44, 0xbd, 0xd6, 0x69, 0xf7, 0x7d, 0xa1, 0x92, 0x8f, 0x85, 0x4a, 0x3e, 0x17, 0x2a, 0x79, 0xfd,
	0x52, 0x7f, 0x5c, 0xcb, 0xc7, 0xb1, 0xeb, 0x36, 0xb2, 0xdf, 0x6a, 0xf8, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xc4, 0xfc, 0x31, 0x45, 0x69, 0x03, 0x00, 0x00,
}

func (m *ReqCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Character) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Character) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Character) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SceneId))
		i--
		dAtA[i] = 0x39
	}
	if m.SceneType != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.SceneType))
		i--
		dAtA[i] = 0x35
	}
	if m.IsNovice {
		i--
		if m.IsNovice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Figure != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Figure))
		i--
		dAtA[i] = 0x25
	}
	if m.Gender != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gender))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cid != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Cid))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Characters) > 0 {
		for iNdEx := len(m.Characters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Characters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCharacter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ErrCode != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ErrCode))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ReqCharacterCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCharacterCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCharacterCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Figure != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Figure))
		i--
		dAtA[i] = 0x1d
	}
	if m.Gender != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gender))
		i--
		dAtA[i] = 0x15
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintCharacter(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacterCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacterCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacterCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrCode != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ErrCode))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ReqCharacterSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCharacterSelect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCharacterSelect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Cid))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacterSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacterSelect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacterSelect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrCode != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ErrCode))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ReqCharacterEnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCharacterEnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCharacterEnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacterEnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacterEnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacterEnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrCode != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ErrCode))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ReqCharacterChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCharacterChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCharacterChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SceneId))
		i--
		dAtA[i] = 0x11
	}
	if m.SceneType != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.SceneType))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacterChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacterChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacterChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrCode != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ErrCode))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ReqCharacterExitScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqCharacterExitScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqCharacterExitScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ResCharacterExitScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResCharacterExitScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResCharacterExitScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrCode != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ErrCode))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintCharacter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCharacter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReqCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Character) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 9
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	if m.Gender != 0 {
		n += 5
	}
	if m.Figure != 0 {
		n += 5
	}
	if m.IsNovice {
		n += 2
	}
	if m.SceneType != 0 {
		n += 5
	}
	if m.SceneId != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 5
	}
	if len(m.Characters) > 0 {
		for _, e := range m.Characters {
			l = e.Size()
			n += 1 + l + sovCharacter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCharacterCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovCharacter(uint64(l))
	}
	if m.Gender != 0 {
		n += 5
	}
	if m.Figure != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacterCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCharacterSelect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacterSelect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCharacterEnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacterEnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCharacterChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SceneType != 0 {
		n += 5
	}
	if m.SceneId != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacterChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReqCharacterExitScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResCharacterExitScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCharacter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCharacter(x uint64) (n int) {
	return sovCharacter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReqCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Character) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Character: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Character: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Figure", wireType)
			}
			m.Figure = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Figure = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNovice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNovice = bool(v != 0)
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			m.SceneType = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.SceneType = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SceneId = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Characters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Characters = append(m.Characters, &Character{})
			if err := m.Characters[len(m.Characters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCharacterCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCharacterCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCharacterCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharacter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharacter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Figure", wireType)
			}
			m.Figure = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Figure = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacterCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacterCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacterCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCharacterSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCharacterSelect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCharacterSelect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacterSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacterSelect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacterSelect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCharacterEnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCharacterEnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCharacterEnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacterEnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacterEnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacterEnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCharacterChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCharacterChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCharacterChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			m.SceneType = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.SceneType = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SceneId = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacterChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacterChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacterChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqCharacterExitScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqCharacterExitScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqCharacterExitScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResCharacterExitScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResCharacterExitScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResCharacterExitScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCharacter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharacter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCharacter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCharacter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharacter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCharacter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCharacter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCharacter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCharacter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCharacter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCharacter = fmt.Errorf("proto: unexpected end of group")
)
